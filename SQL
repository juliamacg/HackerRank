/*Query all columns for all American cities in the CITY table with populations larger than 100000. The CountryCode for America is USA.*/

SELECT * FROM CITY WHERE POPULATION > 100000 AND COUNTRYCODE='USA';

/*Query the NAME field for all American cities in the CITY table with populations larger than 120000. The CountryCode for America is USA.*/

SELECT NAME FROM CITY WHERE POPULATION > 120000 AND COUNTRYCODE='USA';

/*Query all columns (attributes) for every row in the CITY table.*/

SELECT * FROM CITY;

/*Query all columns for a city in CITY with the ID 1661.*/

SELECT * FROM CITY WHERE ID=1661;

/*Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN.*/

SELECT * FROM CITY WHERE COUNTRYCODE='JPN';

/*Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN.*/

SELECT NAME FROM CITY WHERE COUNTRYCODE='JPN';

/*Query a list of CITY and STATE from the STATION table.*/

SELECT CITY, STATE FROM STATION;

/*Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer.*/

SELECT DISTINCT CITY FROM STATION WHERE ID % 2 = 0;

/*Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.*/

SELECT COUNT(CITY) - COUNT(DISTINCT CITY) FROM STATION;

/*Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.*/

SELECT TOP 1 CITY, LEN(CITY) FROM STATION ORDER BY 2 DESC, 1;
SELECT TOP 1 CITY, LEN(CITY) FROM STATION ORDER BY 2 ASC, 1;

/*Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.*/

SELECT DISTINCT CITY FROM STATION WHERE LEFT(CITY,1)='A' OR LEFT(CITY,1)='E' OR LEFT(CITY,1)='I' OR LEFT(CITY,1)='O' OR LEFT(CITY,1)='U';

/*Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.*/

SELECT DISTINCT CITY FROM STATION WHERE RIGHT(CITY,1)='a' OR RIGHT(CITY,1)='e' OR RIGHT(CITY,1)='i' OR RIGHT(CITY,1)='o' OR RIGHT(CITY,1)='u';

/*Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.*/

SELECT DISTINCT CITY FROM STATION WHERE RIGHT(CITY,1) IN ('A','E','I','O','U') AND LEFT(CITY,1) IN ('a','e','i','o','u');

/*Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.*/

SELECT DISTINCT CITY FROM STATION WHERE LEFT(CITY,1) NOT IN ('A','E','I','O','U');

/*Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.*/

SELECT DISTINCT CITY FROM STATION WHERE RIGHT(CITY,1) NOT IN ('a','e','i','o','u') ;

--Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.

SELECT DISTINCT CITY FROM STATION WHERE LEFT(CITY,1) NOT IN ('A','E','I','O','U') OR RIGHT(CITY,1) NOT IN ('a','e','i','o','u');

--Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates

SELECT DISTINCT CITY FROM STATION WHERE LEFT(CITY,1) NOT IN ('A','E','I','O','U') AND RIGHT(CITY,1) NOT IN ('a','e','i','o','u');

--Query the Name of any student in STUDENTS who scored higher than 75 Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.

SELECT Name FROM STUDENTS WHERE Marks > 75 ORDER BY RIGHT(Name,3), ID ASC;

--Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.

SELECT name FROM Employee ORDER BY 1 ASC;

--Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than $2000 per month who have been employees for less than 10 months. Sort your result by ascending employee_id.

SELECT name from Employee WHERE salary>2000 AND months<10 ORDER BY employee_id ASC;

--Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:

--Equilateral: It's a triangle with  sides of equal length.
--Isosceles: It's a triangle with  sides of equal length.
--Scalene: It's a triangle with  sides of differing lengths.
--Not A Triangle: The given values of A, B, and C don't form a triangle.

SELECT CASE WHEN (A + B <= C) OR (B + C <= A) OR (C + A <= B) THEN 'Not A Triangle' WHEN A = B and B = C THEN 'Equilateral' WHEN (A = B) OR (B = C) OR (A = C) THEN 'Isosceles' ELSE 'Scalene' END FROM TRIANGLES;

--Generate the following two result sets:

--Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a parenthetical (i.e.: enclosed in parentheses). For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S).
--Query the number of ocurrences of each occupation in OCCUPATIONS. Sort the occurrences in ascending order, and output them in the following format:

--There are a total of [occupation_count] [occupation]s.

SELECT CONCAT(Name,'(',LEFT(Occupation,1),')') FROM OCCUPATIONS ORDER BY Name;
SELECT CONCAT('There are a total of ',COUNT(Occupation),' ',LOWER(Occupation),'s.') FROM OCCUPATIONS GROUP BY Occupation ORDER BY COUNT(Occupation) ASC, Occupation ASC;
