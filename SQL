/*Query all columns for all American cities in the CITY table with populations larger than 100000. The CountryCode for America is USA.*/

SELECT * FROM CITY WHERE POPULATION > 100000 AND COUNTRYCODE='USA';

/*Query the NAME field for all American cities in the CITY table with populations larger than 120000. The CountryCode for America is USA.*/

SELECT NAME FROM CITY WHERE POPULATION > 120000 AND COUNTRYCODE='USA';

/*Query all columns (attributes) for every row in the CITY table.*/

SELECT * FROM CITY;

/*Query all columns for a city in CITY with the ID 1661.*/

SELECT * FROM CITY WHERE ID=1661;

/*Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN.*/

SELECT * FROM CITY WHERE COUNTRYCODE='JPN';

/*Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN.*/

SELECT NAME FROM CITY WHERE COUNTRYCODE='JPN';

/*Query a list of CITY and STATE from the STATION table.*/

SELECT CITY, STATE FROM STATION;

/*Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer.*/

SELECT DISTINCT CITY FROM STATION WHERE ID % 2 = 0;

/*Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.*/

SELECT COUNT(CITY) - COUNT(DISTINCT CITY) FROM STATION;

/*Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.*/

SELECT TOP 1 CITY, LEN(CITY) FROM STATION ORDER BY 2 DESC, 1;
SELECT TOP 1 CITY, LEN(CITY) FROM STATION ORDER BY 2 ASC, 1;

/*Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.*/

SELECT DISTINCT CITY FROM STATION WHERE LEFT(CITY,1)='A' OR LEFT(CITY,1)='E' OR LEFT(CITY,1)='I' OR LEFT(CITY,1)='O' OR LEFT(CITY,1)='U';

/*Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.*/

SELECT DISTINCT CITY FROM STATION WHERE RIGHT(CITY,1)='a' OR RIGHT(CITY,1)='e' OR RIGHT(CITY,1)='i' OR RIGHT(CITY,1)='o' OR RIGHT(CITY,1)='u';

/*Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.*/

SELECT DISTINCT CITY FROM STATION WHERE RIGHT(CITY,1) IN ('A','E','I','O','U') AND LEFT(CITY,1) IN ('a','e','i','o','u');

/*Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.*/

SELECT DISTINCT CITY FROM STATION WHERE LEFT(CITY,1) NOT IN ('A','E','I','O','U');

/*Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.*/

SELECT DISTINCT CITY FROM STATION WHERE RIGHT(CITY,1) NOT IN ('a','e','i','o','u') ;

--Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.

SELECT DISTINCT CITY FROM STATION WHERE LEFT(CITY,1) NOT IN ('A','E','I','O','U') OR RIGHT(CITY,1) NOT IN ('a','e','i','o','u');

--Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates

SELECT DISTINCT CITY FROM STATION WHERE LEFT(CITY,1) NOT IN ('A','E','I','O','U') AND RIGHT(CITY,1) NOT IN ('a','e','i','o','u');

--Query the Name of any student in STUDENTS who scored higher than 75 Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.

SELECT Name FROM STUDENTS WHERE Marks > 75 ORDER BY RIGHT(Name,3), ID ASC;

--Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.

SELECT name FROM Employee ORDER BY 1 ASC;

--Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than $2000 per month who have been employees for less than 10 months. Sort your result by ascending employee_id.

SELECT name from Employee WHERE salary>2000 AND months<10 ORDER BY employee_id ASC;

--Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:

--Equilateral: It's a triangle with  sides of equal length.
--Isosceles: It's a triangle with  sides of equal length.
--Scalene: It's a triangle with  sides of differing lengths.
--Not A Triangle: The given values of A, B, and C don't form a triangle.

SELECT CASE WHEN (A + B <= C) OR (B + C <= A) OR (C + A <= B) THEN 'Not A Triangle' WHEN A = B and B = C THEN 'Equilateral' WHEN (A = B) OR (B = C) OR (A = C) THEN 'Isosceles' ELSE 'Scalene' END FROM TRIANGLES;

--Generate the following two result sets:

--Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a parenthetical (i.e.: enclosed in parentheses). For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S).
--Query the number of ocurrences of each occupation in OCCUPATIONS. Sort the occurrences in ascending order, and output them in the following format:

--There are a total of [occupation_count] [occupation]s.

SELECT CONCAT(Name,'(',LEFT(Occupation,1),')') FROM OCCUPATIONS ORDER BY Name;
SELECT CONCAT('There are a total of ',COUNT(Occupation),' ',LOWER(Occupation),'s.') FROM OCCUPATIONS GROUP BY Occupation ORDER BY COUNT(Occupation) ASC, Occupation ASC;

Query a count of the number of cities in CITY having a Population larger than 100000.

SELECT COUNT (NAME) FROM CITY WHERE POPULATION>100000;

Query the total population of all cities in CITY where District is California.

SELECT SUM(POPULATION) FROM CITY WHERE DISTRICT='California';

Query the average population of all cities in CITY where District is California.

SELECT AVG(POPULATION) FROM CITY WHERE DISTRICT='California';

Query the average population for all cities in CITY, rounded down to the nearest integer.

SELECT AVG(FLOOR(POPULATION)) FROM CITY;

Query the sum of the populations for all Japanese cities in CITY. The COUNTRYCODE for Japan is JPN.

SELECT SUM(POPULATION) FROM CITY WHERE COUNTRYCODE='JPN';

Query the difference between the maximum and minimum populations in CITY.

SELECT MAX(POPULATION)-MIN(POPULATION) FROM CITY;

Samantha was tasked with calculating the average monthly salaries for all employees in the EMPLOYEES table, but did not realize her keyboard's  key was broken until after completing the calculation. She wants your help finding the difference between her miscalculation (using salaries with any zeros removed), and the actual average salary.

Write a query calculating the amount of error (i.e.:  average monthly salaries), and round it up to the next integer.

SELECT CEIL(AVG(Salary)-AVG(REPLACE(Salary,'0',''))) FROM  EMPLOYEES;

SELECT AVG(POPULATION) FROM CITY WHERE DISTRICT='California';

--We define an employee's total earnings to be their monthly salary*months worked, and the maximum total earnings to be the maximum total earnings for any employee in the Employee table. Write a query to find the maximum total earnings for all employees as well as the total number of employees who have maximum total earnings. Then print these values as  space-separated integers.

SELECT TOP 1 (months * salary), COUNT(employee_id) FROM Employee GROUP BY (months * salary) ORDER BY 1 DESC;

Query the following two values from the STATION table:

The sum of all values in LAT_N rounded to a scale of 2 decimal places.
The sum of all values in LONG_W rounded to a scale of 2 decimal places.

SELECT CAST(SUM(LAT_N) AS DECIMAL (7,2)), CAST(SUM(LONG_W) AS DECIMAL (7,2)) FROM STATION;

Query the sum of Northern Latitudes (LAT_N) from STATION having values greater than 38.7880 and less than 137.2345. Truncate your answer to 4 decimal places.

SELECT CAST(SUM(LAT_N) AS DECIMAL(11,4)) FROM STATION WHERE (LAT_N>38.7880) AND (LAT_N<137.2345);

Query the greatest value of the Northern Latitudes (LAT_N) from STATION that is less than 137.2345. Truncate your answer to 4 decimal places.

SELECT CAST(MAX(LAT_N) AS DECIMAL(11,4)) FROM STATION WHERE LAT_N<137.2345;

Query the Western Longitude (LONG_W) for the largest Northern Latitude (LAT_N) in STATION that is less than 137.2345. Round your answer to 4 decimal places.

SELECT TOP 1 CAST(LONG_W AS DECIMAL(11,4)) FROM STATION WHERE LAT_N<137.2345 ORDER BY LAT_N DESC;

Query the smallest Northern Latitude (LAT_N) from STATION that is greater than 38.7780. Round your answer to 4 decimal places.

SELECT TOP 1 CAST(LAT_N AS DECIMAL(11,4)) FROM STATION WHERE LAT_N>38.7780 ORDER BY LAT_N ASC;

Query the Western Longitude (LONG_W)where the smallest Northern Latitude (LAT_N) in STATION is greater than 38.7780. Round your answer to 4 decimal places.

SELECT TOP 1 CAST(LONG_W AS DECIMAL(11,4)) FROM STATION WHERE LAT_N>38.7780 ORDER BY LAT_N ASC;

Consider P1(a,b)  and P2(c,d) to be two points on a 2D plane.

a happens to equal the minimum value in Northern Latitude (LAT_N in STATION).
b happens to equal the minimum value in Western Longitude (LONG_W in STATION).
c happens to equal the maximum value in Northern Latitude (LAT_N in STATION).
d happens to equal the maximum value in Western Longitude (LONG_W in STATION).
Query the Manhattan Distance between points P1 and P2 and round it to a scale of 4 decimal places.

SELECT CAST(ABS((MIN(LAT_N)-MAX(LAT_N))+(MIN(LONG_W)-MAX(LONG_W))) AS DECIMAL(11,4)) FROM STATION;

Consider P1(a,c) and P2(b,d) to be two points on a 2D plane where a,b  are the respective minimum and maximum values of Northern Latitude (LAT_N) and c,d are the respective minimum and maximum values of Western Longitude (LONG_W) in STATION.

Query the Euclidean Distance between points P1 and P2 and format your answer to display  decimal digits.

SELECT CAST(SQRT(SQUARE(MAX(LAT_N)-MIN(LAT_N)) + SQUARE(MAX(LONG_W)-MIN(LONG_W))) AS DECIMAL (11,4)) FROM STATION;

Given the CITY and COUNTRY tables, query the sum of the populations of all cities where the CONTINENT is 'Asia'.

Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

SELECT SUM(CITY.POPULATION) FROM CITY INNER JOIN COUNTRY ON CITY.COUNTRYCODE=COUNTRY.CODE WHERE COUNTRY.CONTINENT='Asia';

Given the CITY and COUNTRY tables, query the names of all cities where the CONTINENT is 'Africa'.

Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

SELECT CITY.NAME FROM CITY INNER JOIN COUNTRY ON CITY.COUNTRYCODE=COUNTRY.CODE WHERE COUNTRY.CONTINENT='Africa';


